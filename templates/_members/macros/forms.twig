{% macro textField(config) %}
    {% set user = config.user ?? create('craft\\elements\\User') %}
    {% set name = config.name %}
    {% set id = name|id %}
    {% set type = config.type ?? 'text' %}
    {% set value = config.value is defined ? config.value : user[name] %}
    {% if type == 'password' %}
        {% set value = '' %}
    {% endif %}
    {% set errors = errors ?? user.getErrors(name) %}

    {% set instructions = config.instructions ?? '' %}
    {% set required = config.required ?? false %}

    <div>
        <label for="{{ id }}" class="block text-base text-foreground font-semibold">
            {{ config.label }}
            {% if required %}
                <span class="text-red-600">*</span>
            {% endif %}
        </label>
        <div class="mt-1">

            {{ input(type, name, value , {
                id: id,
                autocomplete: id,
                required: required,
                class: "w-full text-black #{ errors ? 'border border-red-500' }"
            }) }}


            {% if instructions %}
                <div class="my-1 text-sm text-foreground">{{ instructions }}</div>
            {% endif %}

        </div>
        {{ _self.errorsList(errors) }}
    </div>

{% endmacro %}

{% macro fileField(config) %}
    {% set user = config.user ?? create('craft\\elements\\User') %}
	{% set name = config.name %}
    {% set accept = config.accept ?? '*' %}

    <div>
        <label for="{{ name|id }}"
               class="block text-base font-semibold text-foreground">{{ 'Upload a new photo'|t }}</label>
        <div class="mt-4">
            {{ input('file', name, null, {
                id: 'name|id',
                class: 'block w-full text-base text-foreground
                          file:mr-2 file:py-2 file:px-4
                          file:rounded file:border-0
                          file:text-base
                          file:bg-primary file:text-secondary
                          file:cursor-pointer
                          hover:file:bg-black hover:file:text-white file:transition',
                accept: accept,
            }) }}
        </div>
        {{ _self.errorsList(user.getErrors(name)) }}
    </div>

{% endmacro %}


{% macro checkbox(config) %}
    <div>
        <label for="{{ config.name }}" class="block text-sm font-medium text-foreground">
            <input class="mr-2"
                   type="checkbox"
                   name="{{ config.name }}"
                   id="{{ config.name }}"
                   value="{{ config.value }}">
            {{ config.label }}
        </label>
    </div>
{% endmacro %}


{% macro button(caption, indicator=false) %}
    <button type="submit" class="btn bg-primary text-secondary w-full flex justify-center">
        {% if indicator %}
            <div id="spinner" class="htmx-indicator pr-4">
                <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none"
                     viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </div>
        {% endif %}
        {{ caption }}
    </button>
{% endmacro %}

{% macro errorsList(errors) %}
    {% if errors %}
        {{ ul(errors, {class: 'mt-2 text-sm text-red-600'}) }}
    {% endif %}
{% endmacro %}
